@using ScanIT.Models
@{
    Layout = "~/Views/Shared/_LoginRegisterLayout.cshtml";
    ViewBag.Title = "Chat";
}
<div class="col-md-12 container container_row row justify-content-center" style="position: absolute; top:30%;">
    <div class="pop layer1" style="position:relative; text-align:center; z-index:0">
        <div class="container-fluid" >
            <h4>Welcome to our Chat Room</h4>
            <hr />
            <div style="        border-radius: 30px;
                                background-color: rgba(13, 18, 28, 0.99);
                                color: white;
                                box-shadow: 5px 5px 5px 5px #E0E0E0;
                                height: 300px;
                                width:700px;
                                overflow:auto;
                                " id="chat">
                <input type="hidden" id="displayname" />

                <ul id="discussion">
                </ul>

            </div>
            <div class="form-group">
                <input type="text" id="message" />
            </div>
            <div class="form-group">
                <input type="button" id="sendmessage" class="btn align-self-center btn-danger" value="Send" />
            </div>
        </div>
        <hr />
    </div>
</div>
<canvas id="canva" class="layer2"></canvas>


@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            var counter = 0;
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            var displayName = '@(ViewBag.DisplayName)';
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li '+ 'id="chatmessage'+counter+ '">' + '<p style = "text-align:left; color:#72f081;">'+ htmlEncode(name) +
                    ': ' + htmlEncode(message) + '</p>'+ '</li>' );
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val(displayName);
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    counter++;
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                    var countername = "#chatmessage" + counter;
                    //console.log("'" + countername+"'");
                    //document.getElementById("'" + countername + "'").scrollIntoView();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}