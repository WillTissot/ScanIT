@model ScanIT.ViewModels.OrderVM
@{
    ViewBag.Title = "Basket Summary";
    Layout = "~/Views/Shared/_LoginRegisterLayout.cshtml";
}
<table id="example" class="table table-striped table-bordered dt-responsive nowrap" style="width:100%">
    @foreach (var item in Model.OrderDetailsVMs)
    {
        <thead style="color:ghostwhite;">
            <tr style="background-color: rgba(14, 21, 31, 0.85)">
                <th>
                    <div class="d-flex justify-content-center">
                        @Html.DisplayNameFor(model => Model.OrderDetailsVMs.SingleOrDefault().ProductName)
                    </div>
                </th>
                <th>
                    <div class="d-flex justify-content-center">
                        @Html.DisplayNameFor(model => Model.OrderDetailsVMs.SingleOrDefault().ProductDescription)
                    </div>
                </th>

                <th>
                    <div class="d-flex justify-content-center">
                        @Html.DisplayNameFor(model => Model.OrderDetailsVMs.SingleOrDefault().ProductSelectedQuantity)
                    </div>
                </th>
                <th>
                    <div class="d-flex justify-content-center">
                        @Html.DisplayNameFor(model => Model.OrderDetailsVMs.SingleOrDefault().ProductPriceIncludingVat)
                    </div>
                </th>
                <th>
                    <div class="d-flex justify-content-center">
                        @Html.DisplayNameFor(model => Model.OrderDetailsVMs.SingleOrDefault().TotalPricePerOrderDetails)
                    </div>
                </th>

                @*optional, looks better but kind of repetitive*@
                <th>
                    <div class="d-flex justify-content-center">
                        Delete Product
                    </div>
                </th>
            </tr>
        </thead>
        <tbody style="        background-color: rgba(14, 21, 31, 0.55);
        font-weight: 700;
        text-shadow: 1px 1px rgba(14, 21, 31, 0.55)
">
            <tr>
                <td>
                    <div class="d-flex justify-content-center">
                        @Html.DisplayFor(modelItem => item.ProductName)
                    </div>

                    <div class="d-flex justify-content-center">
                        @{
                            var base64 = Convert.ToBase64String(item.ProductPhoto);
                            var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                        }

                        <img src="@imgSrc" />
                    </div>
                </td>
                <td>
                    <div class="d-flex justify-content-center">
                        @Html.DisplayFor(modelItem => item.ProductDescription)
                    </div>
                </td>
                <td>
                    <div class="d-flex justify-content-center">
                        @Html.DisplayFor(modelItem => item.ProductSelectedQuantity)
                    </div>
                </td>
                <td>
                    <div class="d-flex justify-content-center">
                        @Html.DisplayFor(modelItem => item.ProductPriceIncludingVat)&euro;
                    </div>
                </td>
                <td>
                    <div class="d-flex justify-content-center">
                        @Html.DisplayFor(modelItem => item.TotalPricePerOrderDetails)&euro;
                    </div>
                </td>
                <td>
                    <div class="d-flex justify-content-center">
                        <button class="btn btn-danger">@Html.ActionLink("Remove From Basket", "DeleteProduct", "Basket", new { productName = item.ProductName, userId = Model.ApplicationUserId }, null)</button>

                    </div>
                </td>
            </tr>

        </tbody>
        @Html.HiddenFor(o => o.ApplicationUserId)
        @Html.HiddenFor(o => o.OrderDetailsVMs)
    }

</table>
<div class="d-flex justify-content-center" style="font-size:xx-large; font-weight:700;">
    <p>
        Your Total Amount is: @Math.Round(Model.OrderDetailsVMs.Sum(x => x.TotalPricePerOrderDetails), 2) &euro;
    </p>

</div>

<div>
    <div class="d-flex justify-content-center">
        @Html.ActionLink("Delete Order", "DropOrder", "Basket",null, new { @class = "btn btn-danger" })&nbsp;&nbsp;
        @Html.ActionLink("Continue Shopping", "Index", "Products",null, new { @class = "btn btn-primary" })
    </div>
</div>
<div style="font-size:xx-large; font-weight:700;">
    <div class="d-flex justify-content-center">
        <div id="smart-button-container">
            <div style="text-align: center;">
                <div id="paypal-button-container" style="white-space: break-spaces; margin-top:10px;>
                    <script src="https://www.paypal.com/sdk/js?client-id=sb"></script>
                    <script>paypal.Buttons().render('body');</script>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="https://www.paypal.com/sdk/js?client-id=sb&currency=EUR" data-sdk-integration-source="button-factory"></script>
<script>
    function initPayPalButton() {
        paypal.Buttons({
            style: {
                shape: 'rect',
                color: 'gold',
                layout: 'vertical',
                label: 'paypal',

            },

            createOrder: function (data, actions) {
                var totalPrice =  @Model.OrderDetailsVMs.Sum(x => x.TotalPricePerOrderDetails);

                totalPrice = Math.round((totalPrice + Number.EPSILON) * 100) / 100;

                return actions.order.create({
                    purchase_units: [{ "amount": { "currency_code": "EUR", "value": (totalPrice + 10), "breakdown": { "item_total": { "currency_code": "EUR", "value": totalPrice }, "shipping": { "currency_code": "EUR", "value": 10 }, "tax_total": { "currency_code": "EUR", "value": 0 } } } }]
                });
            },

            onApprove: function (data, actions) {
                return actions.order.capture().then(function (details) {
                    alert('Transaction completed by ' + details.payer.name.given_name + '!');
                    $.ajax({
                        url: "/Basket/CompleteShopping",
                        type: "POST",
                        dataType: "text",
                        data: { status: "completed" },
                        contentType: "application/x-www-form-urlencoded",
                        success: function (data) {
                                window.location.href = '@Url.Action("ThankYou" , "Basket")';
                        },
                        error: function () {
                            console.log(error);
                        }
                    });
                });
            },

            onError: function (err) {
                console.log(err);
            }
        }).render('#paypal-button-container');
    }
    initPayPalButton();
</script>